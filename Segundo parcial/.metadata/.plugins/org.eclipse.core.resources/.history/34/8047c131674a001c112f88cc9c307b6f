#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include "Employee.h"

eLibro* book_new()
{
	eLibro* newBook;
    newBook = (eLibro*)malloc(sizeof(newBook));

    if(newBook != NULL)
    {
    	newBook->id = 0;
        strcpy(newBook->titulo, " ");
        strcpy(newBook->autor, " ");
        newBook->precio = 0;
        newBook->idEditorial = 0;
    }

    return newBook;
}
eLibro* book_newParametros(char* idStr, char* tituloStr, char* autorStr, char* precioStr, char* idEditorialStr)
{
	eLibro* newBook;
	newBook = book_new();

    int id;
    float precio;
    int idEditorial;

    if(idStr != NULL && tituloStr != NULL && autorStr != NULL && precioStr != NULL && idEditorialStr != NULL  && newBook != NULL ){
		id= atoi(idStr);
		precio= atoi(precioStr);
		idEditorial= atoi(idEditorialStr);

		book_setId(newBook, id);
		book_setNombre(newBook, tituloStr);
		book_setSueldo(newBook, precio);
		book_setHorasTrabajadas(newBook, idEditorial);

    }

    return newBook;
}
void book_delete(eLibro* this){

	if(this!=NULL){
		free(this);
	}

}
int book_setId(eLibro* this,int id){
	int retorno;
	retorno = -1;
	if(this!= NULL){
        this->id = id;
        retorno = 0;
	}
	return retorno;
}

int book_getId(eLibro* this,int* id){
	int retorno;
	retorno = -1;
	if(this!= NULL && id!= NULL){
	       *id = this->id;
	        retorno = 0;
		}
	return retorno;
}
int book_setTitulo(eLibro* this,char* titulo){
	int retorno;
	retorno = -1;
	if(this!= NULL){

	      strcpy(this->titulo , titulo);
	      this->titulo[0] = toupper(this->titulo[0]);

	      retorno = 0;
	}
	return retorno;
}
int book_getTitulo(eLibro* this,char* titulo){
	int retorno;
	retorno = -1;
	if(this!= NULL && titulo!= NULL){

		  strcpy(titulo,this->titulo);


		  retorno = 0;
	}
	return retorno;
}
int book_getAutor(eLibro* this,char* autor){
	int retorno;
	retorno = -1;
	if(this!= NULL && autor!= NULL){
		  strcpy(autor, this->autor);
		  retorno = 0;
		}
	return retorno;
}
int book_setAutor(eLibro* this,char* autor){
	int retorno;
	retorno = -1;
	if(this!= NULL){

	      strcpy(this->autor , autor);
	      this->autor[0] = toupper(this->autor[0]);

	      retorno = 0;
	}
	return retorno;
}
int book_getAutor(eLibro* this,char* autor){
	int retorno;
	retorno = -1;
	if(this!= NULL && autor!= NULL){
		  strcpy(autor, this->autor);
		  retorno = 0;
		}
	return retorno;
}

int bool_setPrecio(eLibro* this,float precio){
	int retorno;
	retorno = -1;
	if(this!= NULL){
		this->precio = precio;
		retorno = 0;
	}
	return retorno;
}
int bool_getPrecio(eLibro* this,float* precio){

}

int employee_orderById(void* firstId, void* secondId){
	int retorno = 0;
		int primerId;
		int segundoId;
		if(firstId != NULL && secondId != NULL){
			employee_getId(firstId,&primerId);
			employee_getId(secondId,&segundoId);

			if(primerId > segundoId){
                retorno = 1;
			}
			else if (primerId < segundoId){
				retorno = -1;
			}
		}

		return retorno;
}
int employee_orderByName(void* firstName, void* secondName){
	int retorno = -2;
	char primerNombre[100];
    char segundoNombre[100];


    if(firstName != NULL && secondName != NULL){
    	employee_getNombre(firstName,  primerNombre);
		employee_getNombre(secondName, segundoNombre);
		retorno = strcmp(primerNombre, segundoNombre);
    }

    return retorno;
}
int employee_orderBySalary(void* firstSalary, void* secondSalary){
	int retorno = 0;
	int primerSalario;
	int segundoSalario;
	if(firstSalary != NULL && secondSalary != NULL){
		employee_getSueldo(firstSalary,&primerSalario);
		employee_getSueldo(secondSalary,&segundoSalario);

		if(primerSalario > segundoSalario){
			retorno = 1;
		}
		else if (primerSalario < segundoSalario){
			retorno = -1;
		}
	}

			return retorno;
    return retorno;
}
int employee_orderByHours(void* firstHours, void* secondHours){
    int primerHora;
    int segundaHora;
    int retorno = 0;

    employee_getHorasTrabajadas(firstHours, &primerHora);
    employee_getHorasTrabajadas(secondHours, &segundaHora);

    if(primerHora > segundaHora){
        retorno = 1;
    }
    else if(primerHora < segundaHora){
        retorno = -1;
    }
    return retorno;
}
